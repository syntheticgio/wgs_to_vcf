# Additional information on how to set up a google service account to be able to access
# can be found here: https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries#client-libraries-install-python

#
# The proper key needs to be set as an environmental variable before this script will work.  It will also
# require you to have credentialed access to controlled data through ISB.
#

#
# NOTE: This script does not contain robust error handling or sanitization.  A production level
# script would require additional care when dealing with user entered information.
#
from google.cloud import bigquery
import argparse


def run_query(sql_query, vcf_file):
    #
    # This is the header generated by the original VarScan2 program, duplicated here for a faithful reproduction.
    #

    header = """##fileformat=VCFv4.1
##source=VarScan2

##INFO=<ID=DP,Number=1,Type=Integer,Description="Total depth of quality bases">
##INFO=<ID=SOMATIC,Number=0,Type=Flag,Description="Indicates if record is a somatic mutation">
##INFO=<ID=SS,Number=1,Type=String,Description="Somatic status of variant (0=Reference,1=Germline,2=Somatic,3=LOH, or 5=Unknown)">
##INFO=<ID=SSC,Number=1,Type=String,Description="Somatic score in Phred scale (0-255) derived from somatic p-value">
##INFO=<ID=GPV,Number=1,Type=Float,Description="Fisher's Exact Test P-value of tumor+normal versus no variant for Germline calls">
##INFO=<ID=SPV,Number=1,Type=Float,Description="Fisher's Exact Test P-value of tumor versus normal for Somatic/LOH calls">
##FILTER=<ID=str10,Description="Less than 10% or more than 90% of variant supporting reads on one strand">
##FILTER=<ID=indelError,Description="Likely artifact due to indel reads at this position">
##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##FORMAT=<ID=GQ,Number=1,Type=Integer,Description="Genotype Quality">
##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Read Depth">
##FORMAT=<ID=RD,Number=1,Type=Integer,Description="Depth of reference-supporting bases (reads1)">
##FORMAT=<ID=AD,Number=1,Type=Integer,Description="Depth of variant-supporting bases (reads2)">
##FORMAT=<ID=FREQ,Number=1,Type=String,Description="Variant allele frequency">
##FORMAT=<ID=DP4,Number=1,Type=String,Description="Strand read counts: ref/fwd, ref/rev, var/fwd, var/rev">
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	NORMAL	TUMOR
"""

    # Create the client and call the query.
    client = bigquery.Client()
    query_job = client.query(sql_query)
    results = query_job.result()

    snp_count = 0
    with open(vcf_file, "w") as f:
        # Write header to file
        f.write(header)

        # Write each of the entries out into the VCF file.
        for row in results:
            snp_count += 1
            vcf_line = "{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\n".format(row.CHROM, row.POS, row.ID, row.REF, row.ALT, row.QUAL, row.FILTER, row.INFO,
                                                                             row.FORMAT, row.NORMAL, row.TUMOR)
            f.write(vcf_line)
    print("Number of SNVs written: {}".format(snp_count))


# TCGA-44-2656
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("tcga_id", help="TCGA ID to generate a vcf file from.")
    parser.add_argument("--output_file", "-o", default="output.vcf", help="Set the output vcf file name.")
    parser.add_argument("--chromosome",
                        type=str,
                        choices={"chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14",
                                 "chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY"},
                        help="Limit to a specific chromosome.")
    parser.add_argument("--limit", "-l",
                        type=int,
                        help="Limit the number of SNVs returned (for debugging primarily).")

    args = parser.parse_args()
    if args.chromosome is not None:
        query = "SELECT CHROM, POS, ID, REF, ALT, QUAL, INFO, FILTER, FORMAT, NORMAL, TUMOR " \
                "FROM isb-cgc-04-0026.fs_scratch.tcga_variants " \
                "WHERE case_barcode='{}' AND CHROM='{}'".format(args.tcga_id, args.chromosome)
    else:
        query = "SELECT CHROM, POS, ID, REF, ALT, QUAL, INFO, FILTER, FORMAT, NORMAL, TUMOR " \
                "FROM isb-cgc-04-0026.fs_scratch.tcga_variants " \
                "WHERE case_barcode='{}'".format(args.tcga_id)

    if args.limit:
        query = query + " LIMIT {}".format(args.limit)

    print("Processing TCGA ID: {}".format(args.tcga_id))
    print("Writing into file: {}".format(args.output_file))
    run_query(query, args.output_file)
